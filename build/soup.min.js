(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/board.ts":
/*!**********************!*\
  !*** ./src/board.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Board = void 0;
var cell_1 = __webpack_require__(/*! ./cell */ "./src/cell.ts");
var Board = /** @class */ (function () {
    function Board(rows, columns, contentCell) {
        if (contentCell === void 0) { contentCell = ''; }
        this.emptyContentCell = '';
        this.cells = [];
        this.rows = rows;
        this.columns = columns;
        this.contentCell = (contentCell == this.emptyContentCell) ? this.emptyContentCell : contentCell;
        this.createDefaultCells(this.contentCell);
    }
    //Show content of the board.
    Board.prototype.show = function () {
        var output = '';
        for (var i = 0; i < this.cells.length; i++) {
            for (var j = 0; j < this.cells[i].length; j++) {
                var cell = this.cells[i][j];
                output += '[' + cell.getContent() + ']';
            }
            output += '\n';
        }
        return output;
    };
    //Set default content to each cell.
    Board.prototype.createDefaultCells = function (content) {
        for (var i = 0; i < this.rows; i++) {
            this.cells[i] = [];
            for (var j = 0; j < this.columns; j++) {
                this.cells[i][j] = new cell_1.Cell(content, i, j);
            }
        }
    };
    //Get a whole row from specific index.
    Board.prototype.getRow = function (row) {
        var cells = [];
        cells = this.cells[row];
        return cells;
    };
    //Get part of a row from specific index.
    Board.prototype.getRowCells = function (startCell, numberCells) {
        var cells = [];
        var indexColumn = startCell.getColumn();
        if (numberCells > this.cells.length)
            throw new Error('Invalid number cells');
        for (var column = 0; (column < numberCells && indexColumn <= this.cells.length - 1); column++) {
            cells.push(this.cells[startCell.getRow()][indexColumn]);
            indexColumn = indexColumn + 1;
        }
        return cells;
    };
    //Get a whole column from specific index.
    Board.prototype.getColumn = function (column) {
        var cells = [];
        for (var row = 0; row < this.cells.length; row++) {
            cells.push(this.cells[row][column]);
        }
        return cells;
    };
    //Get part of a column from specific index.
    Board.prototype.getColumnCells = function (startCell, numberCells) {
        var cells = [];
        var indexRow = startCell.getRow();
        if (numberCells > this.cells.length)
            throw new Error('Invalid number cells');
        for (var row = 0; (row < numberCells && indexRow <= this.cells.length - 1); row++) {
            cells.push(this.cells[indexRow][startCell.getColumn()]);
            indexRow = indexRow + 1;
        }
        return cells;
    };
    //Get a whole diagonal from specific index.
    Board.prototype.getDiagonal = function (row, column) {
        var cells = [];
        var diagonalSize = (row > column) ? (this.cells.length - row) : (this.cells.length - column);
        for (var indexCell = 0; indexCell < diagonalSize; indexCell++) {
            cells.push(this.cells[row + indexCell][column + indexCell]);
        }
        return cells;
    };
    //Get part of a diagonal from specific index.
    Board.prototype.getDiagonalCells = function (startCell, numberCells) {
        var cells = [];
        var diagonalSize = (startCell.getRow() > startCell.getColumn()) ? (this.cells.length - startCell.getRow()) : (this.cells.length - startCell.getColumn());
        if (numberCells <= diagonalSize)
            for (var indexCell = 0; indexCell < numberCells; indexCell++) {
                cells.push(this.cells[startCell.getRow() + indexCell][startCell.getColumn() + indexCell]);
            }
        return cells;
    };
    //Change a cell in board from specific row and column.
    Board.prototype.setCell = function (row, column, cell) {
        this.cells[row][column] = cell;
    };
    //Get a cell in board from specific row and column.
    Board.prototype.getCell = function (row, column) {
        return this.cells[row][column];
    };
    //Get size of the board. 
    Board.prototype.getSize = function () {
        return this.cells.length;
    };
    Board.prototype.setSize = function (size) {
        this.rows = size;
        this.columns = size;
    };
    Board.prototype.reset = function () {
        this.cells = [];
        this.createDefaultCells(this.contentCell);
    };
    //Get default content of the cells.
    Board.prototype.getDefaultContentCell = function () {
        return this.contentCell;
    };
    Board.prototype.getAllCells = function () {
        return this.cells;
    };
    return Board;
}());
exports.Board = Board;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYm9hcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUMsK0JBQThCO0FBRS9CO0lBUUksZUFBWSxJQUFZLEVBQUUsT0FBZSxFQUFDLFdBQXFCO1FBQXJCLDRCQUFBLEVBQUEsZ0JBQXFCO1FBSC9ELHFCQUFnQixHQUFRLEVBQUUsQ0FBQztRQUl2QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUNoRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCw0QkFBNEI7SUFDckIsb0JBQUksR0FBWDtRQUNJLElBQUksTUFBTSxHQUFXLEVBQUUsQ0FBQztRQUN4QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMzQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixNQUFNLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxHQUFHLENBQUM7YUFDM0M7WUFD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

/***/ }),

/***/ "./src/cell.ts":
/*!*********************!*\
  !*** ./src/cell.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Cell = void 0;
var Cell = /** @class */ (function () {
    function Cell(content, row, column) {
        this.content = content;
        this.row = row;
        this.column = column;
    }
    Cell.prototype.getContent = function () {
        return this.content;
    };
    Cell.prototype.getRow = function () {
        return this.row;
    };
    Cell.prototype.getColumn = function () {
        return this.column;
    };
    Cell.prototype.setContent = function (content) {
        this.content = content;
    };
    return Cell;
}());
exports.Cell = Cell;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jZWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBO0lBTUksY0FBWSxPQUFXLEVBQUMsR0FBVSxFQUFDLE1BQWE7UUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDO0lBR00seUJBQVUsR0FBakI7UUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUdNLHFCQUFNLEdBQWI7UUFDSSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDcEIsQ0FBQztJQUdNLHdCQUFTLEdBQWhCO1FBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFHTSx5QkFBVSxHQUFqQixVQUFrQixPQUFXO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFDTCxXQUFDO0FBQUQsQ0FBQyxBQS9CRCxJQStCQztBQS9CWSxvQkFBSSJ9

/***/ }),

/***/ "./src/content_direction.ts":
/*!**********************************!*\
  !*** ./src/content_direction.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContentDirection = void 0;
var ContentDirection;
(function (ContentDirection) {
    ContentDirection[ContentDirection["HORIZONTAL"] = 1] = "HORIZONTAL";
    ContentDirection[ContentDirection["VERTICAL"] = 2] = "VERTICAL";
    ContentDirection[ContentDirection["DiAGONAL"] = 3] = "DiAGONAL";
})(ContentDirection = exports.ContentDirection || (exports.ContentDirection = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudF9kaXJlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY29udGVudF9kaXJlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBWSxnQkFLWDtBQUxELFdBQVksZ0JBQWdCO0lBRXhCLG1FQUFhLENBQUE7SUFDYiwrREFBUSxDQUFBO0lBQ1IsK0RBQVEsQ0FBQTtBQUNaLENBQUMsRUFMVyxnQkFBZ0IsR0FBaEIsd0JBQWdCLEtBQWhCLHdCQUFnQixRQUszQiJ9

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!*********************!*\
  !*** ./src/soup.ts ***!
  \*********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Soup = void 0;
var board_1 = __webpack_require__(/*! ./board */ "./src/board.ts");
var content_direction_1 = __webpack_require__(/*! ./content_direction */ "./src/content_direction.ts");
var Soup = /** @class */ (function () {
    function Soup(content, size, fill) {
        this.content = content;
        this.size = size;
        this.solution = {};
        this.board = new board_1.Board(this.size, this.size, '*');
        this.defaultFill = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        this.fill = (fill) ? fill : this.defaultFill;
    }
    Soup.prototype.generate = function () {
        this.board.reset();
        this.solution = {};
        for (var index = 0; index < this.content.length; index++) {
            var content = this.content[index].toUpperCase();
            var cells = this.getValidCells(content);
            this.setContentInBoard(content, cells, this.isInvertContent());
            this.solution[content] = cells;
        }
        this.fillEmptyCells();
        return this.board.getAllCells();
    };
    Soup.prototype.getSolution = function (valueInContent) {
        if (valueInContent)
            return this.solution[valueInContent.toUpperCase()];
        return this.solution;
    };
    Soup.prototype.show = function () {
        return this.board.show();
    };
    Soup.prototype.setContent = function (content) {
        this.content = content;
    };
    Soup.prototype.setSize = function (size) {
        this.size = size;
        this.board.setSize(this.size);
    };
    Soup.prototype.getSize = function () {
        return this.size;
    };
    Soup.prototype.setFill = function (fill) {
        this.fill = fill;
    };
    Soup.prototype.getValidCells = function (content) {
        var contentSize = content.length;
        var canSetInBoard = false;
        var cells = [];
        do {
            cells = this.getNumberCellsFromContentSize(contentSize);
            var isValid = this.isValidCells(cells, content);
            if (isValid)
                canSetInBoard = true;
        } while (!canSetInBoard);
        return cells;
    };
    Soup.prototype.setContentInBoard = function (content, cells, isInvert) {
        for (var i = 0, j = content.length - 1; i < cells.length; i++, j--) {
            var cell = cells[i];
            var charContent = (isInvert) ? content[j] : content[i];
            cell.setContent(charContent);
            this.board.setCell(cell.getRow(), cell.getColumn(), cell);
        }
    };
    Soup.prototype.getNumberCellsFromContentSize = function (contentSize) {
        var isValidWordInBoard = false;
        var cells = [];
        do {
            var randomCell = this.getRandomCell();
            var direction = this.getRandomDirection();
            if (direction == content_direction_1.ContentDirection.DiAGONAL)
                cells = this.board.getDiagonalCells(randomCell, contentSize);
            if (direction == content_direction_1.ContentDirection.HORIZONTAL)
                cells = this.board.getRowCells(randomCell, contentSize);
            if (direction == content_direction_1.ContentDirection.VERTICAL)
                cells = this.board.getColumnCells(randomCell, contentSize);
            if (cells.length === contentSize)
                isValidWordInBoard = true;
        } while (!isValidWordInBoard);
        return cells;
    };
    Soup.prototype.isValidCells = function (cells, content) {
        var isValid = true;
        for (var i = 0; i < cells.length; i++) {
            if (cells[i].getContent() != this.board.getDefaultContentCell()) {
                isValid = false;
                break;
            }
        }
        return isValid;
    };
    Soup.prototype.getRandomCharFromFill = function () {
        var index = Math.floor(Math.random() * this.fill.length);
        return this.fill.charAt(index);
    };
    Soup.prototype.getRandomCell = function () {
        var row = Math.floor(Math.random() * this.board.getSize());
        var column = Math.floor(Math.random() * this.board.getSize());
        return this.board.getCell(row, column);
    };
    Soup.prototype.getRandomDirection = function () {
        var directions = 3; //HORIZONTAL,VERTICAL,DIAGONAL. 
        return Math.floor(Math.random() * directions) + 1;
        ;
    };
    Soup.prototype.isInvertContent = function () {
        var isInvert = (Math.floor(Math.random() * 2) == 1) ? true : false;
        return isInvert;
    };
    Soup.prototype.fillEmptyCells = function () {
        for (var row = 0; row < this.board.getSize(); row++) {
            for (var column = 0; column < this.board.getSize(); column++) {
                var cell = this.board.getCell(row, column);
                if (cell.getContent() == this.board.getDefaultContentCell()) {
                    cell.setContent(this.getRandomCharFromFill());
                }
            }
        }
    };
    return Soup;
}());
exports.Soup = Soup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUFnQztBQUVoQyx5REFBc0Q7QUFFdEQ7SUFTSSxjQUFZLE9BQXFCLEVBQUMsSUFBVyxFQUFDLElBQVk7UUFDdEQsSUFBSSxDQUFDLE9BQU8sR0FBSyxPQUFPLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBTyxJQUFJLGFBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLFdBQVcsR0FBRyw0QkFBNEIsQ0FBQztRQUNoRCxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFBLElBQUksQ0FBQSxDQUFDLENBQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM3QyxDQUFDO0lBRU0sdUJBQVEsR0FBZjtRQUNJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFHLEtBQUssRUFBRSxFQUFFO1lBQ3ZELElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbEQsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUUs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
})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNEJBQTRCO0FBQ3RELGlDQUFpQywrQkFBK0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxZQUFZO0FBQ1osMkNBQTJDLG11TSIsInNvdXJjZXMiOlsid2VicGFjazovL2xldHRlcnMtc291cC93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vbGV0dGVycy1zb3VwLy4vc3JjL2JvYXJkLnRzIiwid2VicGFjazovL2xldHRlcnMtc291cC8uL3NyYy9jZWxsLnRzIiwid2VicGFjazovL2xldHRlcnMtc291cC8uL3NyYy9jb250ZW50X2RpcmVjdGlvbi50cyIsIndlYnBhY2s6Ly9sZXR0ZXJzLXNvdXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbGV0dGVycy1zb3VwLy4vc3JjL3NvdXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHNlbGYsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQm9hcmQgPSB2b2lkIDA7XHJcbnZhciBjZWxsXzEgPSByZXF1aXJlKFwiLi9jZWxsXCIpO1xyXG52YXIgQm9hcmQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCb2FyZChyb3dzLCBjb2x1bW5zLCBjb250ZW50Q2VsbCkge1xyXG4gICAgICAgIGlmIChjb250ZW50Q2VsbCA9PT0gdm9pZCAwKSB7IGNvbnRlbnRDZWxsID0gJyc7IH1cclxuICAgICAgICB0aGlzLmVtcHR5Q29udGVudENlbGwgPSAnJztcclxuICAgICAgICB0aGlzLmNlbGxzID0gW107XHJcbiAgICAgICAgdGhpcy5yb3dzID0gcm93cztcclxuICAgICAgICB0aGlzLmNvbHVtbnMgPSBjb2x1bW5zO1xyXG4gICAgICAgIHRoaXMuY29udGVudENlbGwgPSAoY29udGVudENlbGwgPT0gdGhpcy5lbXB0eUNvbnRlbnRDZWxsKSA/IHRoaXMuZW1wdHlDb250ZW50Q2VsbCA6IGNvbnRlbnRDZWxsO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlRGVmYXVsdENlbGxzKHRoaXMuY29udGVudENlbGwpO1xyXG4gICAgfVxyXG4gICAgLy9TaG93IGNvbnRlbnQgb2YgdGhlIGJvYXJkLlxyXG4gICAgQm9hcmQucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG91dHB1dCA9ICcnO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jZWxscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuY2VsbHNbaV0ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1tpXVtqXTtcclxuICAgICAgICAgICAgICAgIG91dHB1dCArPSAnWycgKyBjZWxsLmdldENvbnRlbnQoKSArICddJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdXRwdXQgKz0gJ1xcbic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9O1xyXG4gICAgLy9TZXQgZGVmYXVsdCBjb250ZW50IHRvIGVhY2ggY2VsbC5cclxuICAgIEJvYXJkLnByb3RvdHlwZS5jcmVhdGVEZWZhdWx0Q2VsbHMgPSBmdW5jdGlvbiAoY29udGVudCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5jZWxsc1tpXSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNlbGxzW2ldW2pdID0gbmV3IGNlbGxfMS5DZWxsKGNvbnRlbnQsIGksIGopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vR2V0IGEgd2hvbGUgcm93IGZyb20gc3BlY2lmaWMgaW5kZXguXHJcbiAgICBCb2FyZC5wcm90b3R5cGUuZ2V0Um93ID0gZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgIHZhciBjZWxscyA9IFtdO1xyXG4gICAgICAgIGNlbGxzID0gdGhpcy5jZWxsc1tyb3ddO1xyXG4gICAgICAgIHJldHVybiBjZWxscztcclxuICAgIH07XHJcbiAgICAvL0dldCBwYXJ0IG9mIGEgcm93IGZyb20gc3BlY2lmaWMgaW5kZXguXHJcbiAgICBCb2FyZC5wcm90b3R5cGUuZ2V0Um93Q2VsbHMgPSBmdW5jdGlvbiAoc3RhcnRDZWxsLCBudW1iZXJDZWxscykge1xyXG4gICAgICAgIHZhciBjZWxscyA9IFtdO1xyXG4gICAgICAgIHZhciBpbmRleENvbHVtbiA9IHN0YXJ0Q2VsbC5nZXRDb2x1bW4oKTtcclxuICAgICAgICBpZiAobnVtYmVyQ2VsbHMgPiB0aGlzLmNlbGxzLmxlbmd0aClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG51bWJlciBjZWxscycpO1xyXG4gICAgICAgIGZvciAodmFyIGNvbHVtbiA9IDA7IChjb2x1bW4gPCBudW1iZXJDZWxscyAmJiBpbmRleENvbHVtbiA8PSB0aGlzLmNlbGxzLmxlbmd0aCAtIDEpOyBjb2x1bW4rKykge1xyXG4gICAgICAgICAgICBjZWxscy5wdXNoKHRoaXMuY2VsbHNbc3RhcnRDZWxsLmdldFJvdygpXVtpbmRleENvbHVtbl0pO1xyXG4gICAgICAgICAgICBpbmRleENvbHVtbiA9IGluZGV4Q29sdW1uICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNlbGxzO1xyXG4gICAgfTtcclxuICAgIC8vR2V0IGEgd2hvbGUgY29sdW1uIGZyb20gc3BlY2lmaWMgaW5kZXguXHJcbiAgICBCb2FyZC5wcm90b3R5cGUuZ2V0Q29sdW1uID0gZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgIHZhciBjZWxscyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY2VsbHMubGVuZ3RoOyByb3crKykge1xyXG4gICAgICAgICAgICBjZWxscy5wdXNoKHRoaXMuY2VsbHNbcm93XVtjb2x1bW5dKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNlbGxzO1xyXG4gICAgfTtcclxuICAgIC8vR2V0IHBhcnQgb2YgYSBjb2x1bW4gZnJvbSBzcGVjaWZpYyBpbmRleC5cclxuICAgIEJvYXJkLnByb3RvdHlwZS5nZXRDb2x1bW5DZWxscyA9IGZ1bmN0aW9uIChzdGFydENlbGwsIG51bWJlckNlbGxzKSB7XHJcbiAgICAgICAgdmFyIGNlbGxzID0gW107XHJcbiAgICAgICAgdmFyIGluZGV4Um93ID0gc3RhcnRDZWxsLmdldFJvdygpO1xyXG4gICAgICAgIGlmIChudW1iZXJDZWxscyA+IHRoaXMuY2VsbHMubGVuZ3RoKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbnVtYmVyIGNlbGxzJyk7XHJcbiAgICAgICAgZm9yICh2YXIgcm93ID0gMDsgKHJvdyA8IG51bWJlckNlbGxzICYmIGluZGV4Um93IDw9IHRoaXMuY2VsbHMubGVuZ3RoIC0gMSk7IHJvdysrKSB7XHJcbiAgICAgICAgICAgIGNlbGxzLnB1c2godGhpcy5jZWxsc1tpbmRleFJvd11bc3RhcnRDZWxsLmdldENvbHVtbigpXSk7XHJcbiAgICAgICAgICAgIGluZGV4Um93ID0gaW5kZXhSb3cgKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2VsbHM7XHJcbiAgICB9O1xyXG4gICAgLy9HZXQgYSB3aG9sZSBkaWFnb25hbCBmcm9tIHNwZWNpZmljIGluZGV4LlxyXG4gICAgQm9hcmQucHJvdG90eXBlLmdldERpYWdvbmFsID0gZnVuY3Rpb24gKHJvdywgY29sdW1uKSB7XHJcbiAgICAgICAgdmFyIGNlbGxzID0gW107XHJcbiAgICAgICAgdmFyIGRpYWdvbmFsU2l6ZSA9IChyb3cgPiBjb2x1bW4pID8gKHRoaXMuY2VsbHMubGVuZ3RoIC0gcm93KSA6ICh0aGlzLmNlbGxzLmxlbmd0aCAtIGNvbHVtbik7XHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXhDZWxsID0gMDsgaW5kZXhDZWxsIDwgZGlhZ29uYWxTaXplOyBpbmRleENlbGwrKykge1xyXG4gICAgICAgICAgICBjZWxscy5wdXNoKHRoaXMuY2VsbHNbcm93ICsgaW5kZXhDZWxsXVtjb2x1bW4gKyBpbmRleENlbGxdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNlbGxzO1xyXG4gICAgfTtcclxuICAgIC8vR2V0IHBhcnQgb2YgYSBkaWFnb25hbCBmcm9tIHNwZWNpZmljIGluZGV4LlxyXG4gICAgQm9hcmQucHJvdG90eXBlLmdldERpYWdvbmFsQ2VsbHMgPSBmdW5jdGlvbiAoc3RhcnRDZWxsLCBudW1iZXJDZWxscykge1xyXG4gICAgICAgIHZhciBjZWxscyA9IFtdO1xyXG4gICAgICAgIHZhciBkaWFnb25hbFNpemUgPSAoc3RhcnRDZWxsLmdldFJvdygpID4gc3RhcnRDZWxsLmdldENvbHVtbigpKSA/ICh0aGlzLmNlbGxzLmxlbmd0aCAtIHN0YXJ0Q2VsbC5nZXRSb3coKSkgOiAodGhpcy5jZWxscy5sZW5ndGggLSBzdGFydENlbGwuZ2V0Q29sdW1uKCkpO1xyXG4gICAgICAgIGlmIChudW1iZXJDZWxscyA8PSBkaWFnb25hbFNpemUpXHJcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4Q2VsbCA9IDA7IGluZGV4Q2VsbCA8IG51bWJlckNlbGxzOyBpbmRleENlbGwrKykge1xyXG4gICAgICAgICAgICAgICAgY2VsbHMucHVzaCh0aGlzLmNlbGxzW3N0YXJ0Q2VsbC5nZXRSb3coKSArIGluZGV4Q2VsbF1bc3RhcnRDZWxsLmdldENvbHVtbigpICsgaW5kZXhDZWxsXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2VsbHM7XHJcbiAgICB9O1xyXG4gICAgLy9DaGFuZ2UgYSBjZWxsIGluIGJvYXJkIGZyb20gc3BlY2lmaWMgcm93IGFuZCBjb2x1bW4uXHJcbiAgICBCb2FyZC5wcm90b3R5cGUuc2V0Q2VsbCA9IGZ1bmN0aW9uIChyb3csIGNvbHVtbiwgY2VsbCkge1xyXG4gICAgICAgIHRoaXMuY2VsbHNbcm93XVtjb2x1bW5dID0gY2VsbDtcclxuICAgIH07XHJcbiAgICAvL0dldCBhIGNlbGwgaW4gYm9hcmQgZnJvbSBzcGVjaWZpYyByb3cgYW5kIGNvbHVtbi5cclxuICAgIEJvYXJkLnByb3RvdHlwZS5nZXRDZWxsID0gZnVuY3Rpb24gKHJvdywgY29sdW1uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2VsbHNbcm93XVtjb2x1bW5dO1xyXG4gICAgfTtcclxuICAgIC8vR2V0IHNpemUgb2YgdGhlIGJvYXJkLiBcclxuICAgIEJvYXJkLnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNlbGxzLmxlbmd0aDtcclxuICAgIH07XHJcbiAgICBCb2FyZC5wcm90b3R5cGUuc2V0U2l6ZSA9IGZ1bmN0aW9uIChzaXplKSB7XHJcbiAgICAgICAgdGhpcy5yb3dzID0gc2l6ZTtcclxuICAgICAgICB0aGlzLmNvbHVtbnMgPSBzaXplO1xyXG4gICAgfTtcclxuICAgIEJvYXJkLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNlbGxzID0gW107XHJcbiAgICAgICAgdGhpcy5jcmVhdGVEZWZhdWx0Q2VsbHModGhpcy5jb250ZW50Q2VsbCk7XHJcbiAgICB9O1xyXG4gICAgLy9HZXQgZGVmYXVsdCBjb250ZW50IG9mIHRoZSBjZWxscy5cclxuICAgIEJvYXJkLnByb3RvdHlwZS5nZXREZWZhdWx0Q29udGVudENlbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudENlbGw7XHJcbiAgICB9O1xyXG4gICAgQm9hcmQucHJvdG90eXBlLmdldEFsbENlbGxzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNlbGxzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCb2FyZDtcclxufSgpKTtcclxuZXhwb3J0cy5Cb2FyZCA9IEJvYXJkO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZbTloY21RdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZZbTloY21RdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVNc0swSkJRVGhDTzBGQlJTOUNPMGxCVVVrc1pVRkJXU3hKUVVGWkxFVkJRVVVzVDBGQlpTeEZRVUZETEZkQlFYRkNPMUZCUVhKQ0xEUkNRVUZCTEVWQlFVRXNaMEpCUVhGQ08xRkJTQzlFTEhGQ1FVRm5RaXhIUVVGUkxFVkJRVVVzUTBGQlF6dFJRVWwyUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU5vUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dFJRVU5xUWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF6dFJRVU4yUWl4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExFTkJRVU1zVjBGQlZ5eEpRVUZKTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRmRCUVZjc1EwRkJRenRSUVVOb1J5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMGxCUXpsRExFTkJRVU03U1VGRlJDdzBRa0ZCTkVJN1NVRkRja0lzYjBKQlFVa3NSMEZCV0R0UlFVTkpMRWxCUVVrc1RVRkJUU3hIUVVGWExFVkJRVVVzUTBGQlF6dFJRVU40UWl4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdXVUZEZUVNc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8yZENRVU16UXl4SlFVRkpMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU0xUWl4TlFVRk5MRWxCUVVrc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNSMEZCUnl4SFFVRkhMRU5CUVVNN1lVRkRNME03V1VGRFJDeE5RVUZOTEVsQlFVa3NTVUZCU1N4RFFVRkRPMU5CUTJ4Q08xRkJRMFFzVDBGQlR5eE5RVUZOTEVOQlFVTTdTVUZEYkVJc1EwRkJRenRKUVVWRUxHMURRVUZ0UXp0SlFVTXpRaXhyUTBGQmEwSXNSMEZCTVVJc1ZVRkJNa0lzVDBGQlZ6dFJRVU5zUXl4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdFpRVU5vUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0WlFVTnVRaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0blFrRkRia01zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEZkQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJGQlF6VkRPMU5CUTBvN1NVRkRUQ3hEUVVGRE8wbEJSVVFzYzBOQlFYTkRPMGxCUXk5Q0xITkNRVUZOTEVkQlFXSXNWVUZCWXl4SFFVRlZPMUZCUTNCQ0xFbEJRVWtzUzBGQlN5eEhRVUZsTEVWQlFVVXNRMEZCUXp0UlFVTXpRaXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVONFFpeFBRVUZQTEV0QlFVc3NRMEZCUXp0SlFVTnFRaXhEUVVGRE8wbEJSVVFzZDBOQlFYZERPMGxCUTJwRExESkNRVUZYTEVkQlFXeENMRlZCUVcxQ0xGTkJRV01zUlVGQlF5eFhRVUZyUWp0UlFVTm9SQ3hKUVVGSkxFdEJRVXNzUjBGQlpTeEZRVUZGTEVOQlFVTTdVVUZETTBJc1NVRkJTU3hYUVVGWExFZEJRVWNzVTBGQlV5eERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRPMUZCUTNoRExFbEJRVWtzVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUVHRaUVVGRkxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlF6dFJRVVUzUlN4TFFVRkxMRWxCUVVrc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJ5eERRVUZETEUxQlFVMHNSMEZCUnl4WFFVRlhMRWxCUVVrc1YwRkJWeXhKUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFMUJRVTBzUlVGQlJTeEZRVUZGTzFsQlF6RkdMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNoRUxGZEJRVmNzUjBGQlJ5eFhRVUZYTEVkQlFVTXNRMEZCUXl4RFFVRkRPMU5CUXk5Q08xRkJRMFFzVDBGQlR5eExRVUZMTEVOQlFVTTdTVUZEYWtJc1EwRkJRenRKUVVWRUxIbERRVUY1UXp0SlFVTnNReXg1UWtGQlV5eEhRVUZvUWl4VlFVRnBRaXhOUVVGaE8xRkJRekZDTEVsQlFVa3NTMEZCU3l4SFFVRmxMRVZCUVVVc1EwRkJRenRSUVVNelFpeExRVUZMTEVsQlFVa3NSMEZCUnl4SFFVRkhMRU5CUVVNc1JVRkJSU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRkxFVkJRVVU3V1VGRE9VTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRGRrTTdVVUZEUkN4UFFVRlBMRXRCUVVzc1EwRkJRenRKUVVOcVFpeERRVUZETzBsQlJVUXNNa05CUVRKRE8wbEJRM0JETERoQ1FVRmpMRWRCUVhKQ0xGVkJRWE5DTEZOQlFXTXNSVUZCUXl4WFFVRnJRanRSUVVOdVJDeEpRVUZKTEV0QlFVc3NSMEZCWlN4RlFVRkZMRU5CUVVNN1VVRkRNMElzU1VGQlNTeFJRVUZSTEVkQlFVY3NVMEZCVXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8xRkJRMnhETEVsQlFVa3NWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRUdFpRVUZGTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXp0UlFVVTNSU3hMUVVGTExFbEJRVWtzUjBGQlJ5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1IwRkJSeXhYUVVGWExFbEJRVXNzVVVGQlVTeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RlFVRkZPMWxCUXpsRkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM2hFTEZGQlFWRXNSMEZCUnl4UlFVRlJMRWRCUVVVc1EwRkJReXhEUVVGRk8xTkJRek5DTzFGQlEwUXNUMEZCVHl4TFFVRkxMRU5CUVVNN1NVRkRha0lzUTBGQlF6dEpRVVZFTERKRFFVRXlRenRKUVVOd1F5d3lRa0ZCVnl4SFFVRnNRaXhWUVVGdFFpeEhRVUZWTEVWQlFVTXNUVUZCWVR0UlFVTjJReXhKUVVGSkxFdEJRVXNzUjBGQlpTeEZRVUZGTEVOQlFVTTdVVUZETTBJc1NVRkJTU3haUVVGWkxFZEJRVWNzUTBGQlF5eEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVFc1EwRkJReXhEUVVGQkxFTkJRVVVzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVNc1IwRkJSeXhEUVVGRkxFTkJRVUVzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdVVUZEZWtZc1MwRkJTeXhKUVVGSkxGTkJRVk1zUjBGQlJ5eERRVUZETEVWQlFVY3NVMEZCVXl4SFFVRkhMRmxCUVZrc1JVRkJSU3hUUVVGVExFVkJRVVVzUlVGQlJ6dFpRVU0zUkN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4SFFVRkhMRk5CUVZNc1EwRkJReXhEUVVGRExFMUJRVTBzUjBGQlJ5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUXk5RU8xRkJRMFFzVDBGQlR5eExRVUZMTEVOQlFVTTdTVUZEYWtJc1EwRkJRenRKUVVWRUxEWkRRVUUyUXp0SlFVTjBReXhuUTBGQlowSXNSMEZCZGtJc1ZVRkJkMElzVTBGQll5eEZRVUZETEZkQlFXdENPMUZCUTNKRUxFbEJRVWtzUzBGQlN5eEhRVUZsTEVWQlFVVXNRMEZCUXp0UlFVTXpRaXhKUVVGSkxGbEJRVmtzUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhUUVVGVExFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUVN4RFFVRkRMRU5CUVVFc1EwRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVWNzUTBGQlFTeERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJTeFRRVUZUTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOMFNpeEpRVUZKTEZkQlFWY3NTVUZCU1N4WlFVRlpPMWxCUXpOQ0xFdEJRVXNzU1VGQlNTeFRRVUZUTEVkQlFVY3NRMEZCUXl4RlFVRkhMRk5CUVZNc1IwRkJSeXhYUVVGWExFVkJRVVVzVTBGQlV5eEZRVUZGTEVWQlFVYzdaMEpCUXpWRUxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NVMEZCVXl4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUlVGQlJTeEhRVUZITEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1lVRkROMFk3VVVGRFRDeFBRVUZQTEV0QlFVc3NRMEZCUXp0SlFVTnFRaXhEUVVGRE8wbEJSVVFzYzBSQlFYTkVPMGxCUXk5RExIVkNRVUZQTEVkQlFXUXNWVUZCWlN4SFFVRlZMRVZCUVVNc1RVRkJZU3hGUVVGRExFbEJRVk03VVVGRE9VTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1NVRkRiRU1zUTBGQlF6dEpRVVZFTEcxRVFVRnRSRHRKUVVNMVF5eDFRa0ZCVHl4SFFVRmtMRlZCUVdVc1IwRkJWU3hGUVVGRExFMUJRV0U3VVVGRGJrTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMGxCUlc1RExFTkJRVU03U1VGRlJDeDVRa0ZCZVVJN1NVRkRiRUlzZFVKQlFVOHNSMEZCWkR0UlFVTkpMRTlCUVU4c1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTTdTVUZETjBJc1EwRkJRenRKUVVWTkxIVkNRVUZQTEVkQlFXUXNWVUZCWlN4SlFVRlhPMUZCUTNSQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTJwQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNoQ0xFTkJRVU03U1VGRlRTeHhRa0ZCU3l4SFFVRmFPMUZCUTBrc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJTeEZRVUZGTEVOQlFVTTdVVUZEWml4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wbEJRemxETEVOQlFVTTdTVUZGUkN4dFEwRkJiVU03U1VGRE5VSXNjVU5CUVhGQ0xFZEJRVFZDTzFGQlEwa3NUMEZCVHl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRE8wbEJRelZDTEVOQlFVTTdTVUZGVFN3eVFrRkJWeXhIUVVGc1FqdFJRVU5KTEU5QlFVOHNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRKUVVOMFFpeERRVUZETzBsQlJVd3NXVUZCUXp0QlFVRkVMRU5CUVVNc1FVRjZTVVFzU1VGNVNVTTdRVUY2U1Zrc2MwSkJRVXNpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQ2VsbCA9IHZvaWQgMDtcclxudmFyIENlbGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDZWxsKGNvbnRlbnQsIHJvdywgY29sdW1uKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcclxuICAgICAgICB0aGlzLnJvdyA9IHJvdztcclxuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcclxuICAgIH1cclxuICAgIENlbGwucHJvdG90eXBlLmdldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudDtcclxuICAgIH07XHJcbiAgICBDZWxsLnByb3RvdHlwZS5nZXRSb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm93O1xyXG4gICAgfTtcclxuICAgIENlbGwucHJvdG90eXBlLmdldENvbHVtbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW47XHJcbiAgICB9O1xyXG4gICAgQ2VsbC5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uIChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ2VsbDtcclxufSgpKTtcclxuZXhwb3J0cy5DZWxsID0gQ2VsbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTJWc2JDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlqWld4c0xuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVGQk8wbEJUVWtzWTBGQldTeFBRVUZYTEVWQlFVTXNSMEZCVlN4RlFVRkRMRTFCUVdFN1VVRkROVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNN1VVRkRka0lzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRaaXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXp0SlFVTjZRaXhEUVVGRE8wbEJSMDBzZVVKQlFWVXNSMEZCYWtJN1VVRkRTU3hQUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTTdTVUZEZUVJc1EwRkJRenRKUVVkTkxIRkNRVUZOTEVkQlFXSTdVVUZEU1N4UFFVRlBMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03U1VGRGNFSXNRMEZCUXp0SlFVZE5MSGRDUVVGVExFZEJRV2hDTzFGQlEwa3NUMEZCVHl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJRM1pDTEVOQlFVTTdTVUZIVFN4NVFrRkJWU3hIUVVGcVFpeFZRVUZyUWl4UFFVRlhPMUZCUTNwQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRPMGxCUXpOQ0xFTkJRVU03U1VGRFRDeFhRVUZETzBGQlFVUXNRMEZCUXl4QlFTOUNSQ3hKUVN0Q1F6dEJRUzlDV1N4dlFrRkJTU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Db250ZW50RGlyZWN0aW9uID0gdm9pZCAwO1xyXG52YXIgQ29udGVudERpcmVjdGlvbjtcclxuKGZ1bmN0aW9uIChDb250ZW50RGlyZWN0aW9uKSB7XHJcbiAgICBDb250ZW50RGlyZWN0aW9uW0NvbnRlbnREaXJlY3Rpb25bXCJIT1JJWk9OVEFMXCJdID0gMV0gPSBcIkhPUklaT05UQUxcIjtcclxuICAgIENvbnRlbnREaXJlY3Rpb25bQ29udGVudERpcmVjdGlvbltcIlZFUlRJQ0FMXCJdID0gMl0gPSBcIlZFUlRJQ0FMXCI7XHJcbiAgICBDb250ZW50RGlyZWN0aW9uW0NvbnRlbnREaXJlY3Rpb25bXCJEaUFHT05BTFwiXSA9IDNdID0gXCJEaUFHT05BTFwiO1xyXG59KShDb250ZW50RGlyZWN0aW9uID0gZXhwb3J0cy5Db250ZW50RGlyZWN0aW9uIHx8IChleHBvcnRzLkNvbnRlbnREaXJlY3Rpb24gPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMjl1ZEdWdWRGOWthWEpsWTNScGIyNHVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12WTI5dWRHVnVkRjlrYVhKbFkzUnBiMjR1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJRVUVzU1VGQldTeG5Ra0ZMV0R0QlFVeEVMRmRCUVZrc1owSkJRV2RDTzBsQlJYaENMRzFGUVVGaExFTkJRVUU3U1VGRFlpd3JSRUZCVVN4RFFVRkJPMGxCUTFJc0swUkJRVkVzUTBGQlFUdEJRVU5hTEVOQlFVTXNSVUZNVnl4blFrRkJaMElzUjBGQmFFSXNkMEpCUVdkQ0xFdEJRV2hDTEhkQ1FVRm5RaXhSUVVzelFpSjkiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Tb3VwID0gdm9pZCAwO1xyXG52YXIgYm9hcmRfMSA9IHJlcXVpcmUoXCIuL2JvYXJkXCIpO1xyXG52YXIgY29udGVudF9kaXJlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2NvbnRlbnRfZGlyZWN0aW9uXCIpO1xyXG52YXIgU291cCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNvdXAoY29udGVudCwgc2l6ZSwgZmlsbCkge1xyXG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcclxuICAgICAgICB0aGlzLnNvbHV0aW9uID0ge307XHJcbiAgICAgICAgdGhpcy5ib2FyZCA9IG5ldyBib2FyZF8xLkJvYXJkKHRoaXMuc2l6ZSwgdGhpcy5zaXplLCAnKicpO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdEZpbGwgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonO1xyXG4gICAgICAgIHRoaXMuZmlsbCA9IChmaWxsKSA/IGZpbGwgOiB0aGlzLmRlZmF1bHRGaWxsO1xyXG4gICAgfVxyXG4gICAgU291cC5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5ib2FyZC5yZXNldCgpO1xyXG4gICAgICAgIHRoaXMuc29sdXRpb24gPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5jb250ZW50Lmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHRoaXMuY29udGVudFtpbmRleF0udG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgdmFyIGNlbGxzID0gdGhpcy5nZXRWYWxpZENlbGxzKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLnNldENvbnRlbnRJbkJvYXJkKGNvbnRlbnQsIGNlbGxzLCB0aGlzLmlzSW52ZXJ0Q29udGVudCgpKTtcclxuICAgICAgICAgICAgdGhpcy5zb2x1dGlvbltjb250ZW50XSA9IGNlbGxzO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpbGxFbXB0eUNlbGxzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9hcmQuZ2V0QWxsQ2VsbHMoKTtcclxuICAgIH07XHJcbiAgICBTb3VwLnByb3RvdHlwZS5nZXRTb2x1dGlvbiA9IGZ1bmN0aW9uICh2YWx1ZUluQ29udGVudCkge1xyXG4gICAgICAgIGlmICh2YWx1ZUluQ29udGVudClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25bdmFsdWVJbkNvbnRlbnQudG9VcHBlckNhc2UoKV07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc29sdXRpb247XHJcbiAgICB9O1xyXG4gICAgU291cC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ib2FyZC5zaG93KCk7XHJcbiAgICB9O1xyXG4gICAgU291cC5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uIChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcclxuICAgIH07XHJcbiAgICBTb3VwLnByb3RvdHlwZS5zZXRTaXplID0gZnVuY3Rpb24gKHNpemUpIHtcclxuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgICAgIHRoaXMuYm9hcmQuc2V0U2l6ZSh0aGlzLnNpemUpO1xyXG4gICAgfTtcclxuICAgIFNvdXAucHJvdG90eXBlLmdldFNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcclxuICAgIH07XHJcbiAgICBTb3VwLnByb3RvdHlwZS5zZXRGaWxsID0gZnVuY3Rpb24gKGZpbGwpIHtcclxuICAgICAgICB0aGlzLmZpbGwgPSBmaWxsO1xyXG4gICAgfTtcclxuICAgIFNvdXAucHJvdG90eXBlLmdldFZhbGlkQ2VsbHMgPSBmdW5jdGlvbiAoY29udGVudCkge1xyXG4gICAgICAgIHZhciBjb250ZW50U2l6ZSA9IGNvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgIHZhciBjYW5TZXRJbkJvYXJkID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGNlbGxzID0gW107XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBjZWxscyA9IHRoaXMuZ2V0TnVtYmVyQ2VsbHNGcm9tQ29udGVudFNpemUoY29udGVudFNpemUpO1xyXG4gICAgICAgICAgICB2YXIgaXNWYWxpZCA9IHRoaXMuaXNWYWxpZENlbGxzKGNlbGxzLCBjb250ZW50KTtcclxuICAgICAgICAgICAgaWYgKGlzVmFsaWQpXHJcbiAgICAgICAgICAgICAgICBjYW5TZXRJbkJvYXJkID0gdHJ1ZTtcclxuICAgICAgICB9IHdoaWxlICghY2FuU2V0SW5Cb2FyZCk7XHJcbiAgICAgICAgcmV0dXJuIGNlbGxzO1xyXG4gICAgfTtcclxuICAgIFNvdXAucHJvdG90eXBlLnNldENvbnRlbnRJbkJvYXJkID0gZnVuY3Rpb24gKGNvbnRlbnQsIGNlbGxzLCBpc0ludmVydCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gY29udGVudC5sZW5ndGggLSAxOyBpIDwgY2VsbHMubGVuZ3RoOyBpKyssIGotLSkge1xyXG4gICAgICAgICAgICB2YXIgY2VsbCA9IGNlbGxzW2ldO1xyXG4gICAgICAgICAgICB2YXIgY2hhckNvbnRlbnQgPSAoaXNJbnZlcnQpID8gY29udGVudFtqXSA6IGNvbnRlbnRbaV07XHJcbiAgICAgICAgICAgIGNlbGwuc2V0Q29udGVudChjaGFyQ29udGVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuc2V0Q2VsbChjZWxsLmdldFJvdygpLCBjZWxsLmdldENvbHVtbigpLCBjZWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU291cC5wcm90b3R5cGUuZ2V0TnVtYmVyQ2VsbHNGcm9tQ29udGVudFNpemUgPSBmdW5jdGlvbiAoY29udGVudFNpemUpIHtcclxuICAgICAgICB2YXIgaXNWYWxpZFdvcmRJbkJvYXJkID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGNlbGxzID0gW107XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICB2YXIgcmFuZG9tQ2VsbCA9IHRoaXMuZ2V0UmFuZG9tQ2VsbCgpO1xyXG4gICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5nZXRSYW5kb21EaXJlY3Rpb24oKTtcclxuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSBjb250ZW50X2RpcmVjdGlvbl8xLkNvbnRlbnREaXJlY3Rpb24uRGlBR09OQUwpXHJcbiAgICAgICAgICAgICAgICBjZWxscyA9IHRoaXMuYm9hcmQuZ2V0RGlhZ29uYWxDZWxscyhyYW5kb21DZWxsLCBjb250ZW50U2l6ZSk7XHJcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT0gY29udGVudF9kaXJlY3Rpb25fMS5Db250ZW50RGlyZWN0aW9uLkhPUklaT05UQUwpXHJcbiAgICAgICAgICAgICAgICBjZWxscyA9IHRoaXMuYm9hcmQuZ2V0Um93Q2VsbHMocmFuZG9tQ2VsbCwgY29udGVudFNpemUpO1xyXG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09IGNvbnRlbnRfZGlyZWN0aW9uXzEuQ29udGVudERpcmVjdGlvbi5WRVJUSUNBTClcclxuICAgICAgICAgICAgICAgIGNlbGxzID0gdGhpcy5ib2FyZC5nZXRDb2x1bW5DZWxscyhyYW5kb21DZWxsLCBjb250ZW50U2l6ZSk7XHJcbiAgICAgICAgICAgIGlmIChjZWxscy5sZW5ndGggPT09IGNvbnRlbnRTaXplKVxyXG4gICAgICAgICAgICAgICAgaXNWYWxpZFdvcmRJbkJvYXJkID0gdHJ1ZTtcclxuICAgICAgICB9IHdoaWxlICghaXNWYWxpZFdvcmRJbkJvYXJkKTtcclxuICAgICAgICByZXR1cm4gY2VsbHM7XHJcbiAgICB9O1xyXG4gICAgU291cC5wcm90b3R5cGUuaXNWYWxpZENlbGxzID0gZnVuY3Rpb24gKGNlbGxzLCBjb250ZW50KSB7XHJcbiAgICAgICAgdmFyIGlzVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2VsbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGNlbGxzW2ldLmdldENvbnRlbnQoKSAhPSB0aGlzLmJvYXJkLmdldERlZmF1bHRDb250ZW50Q2VsbCgpKSB7XHJcbiAgICAgICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNWYWxpZDtcclxuICAgIH07XHJcbiAgICBTb3VwLnByb3RvdHlwZS5nZXRSYW5kb21DaGFyRnJvbUZpbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5maWxsLmxlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsbC5jaGFyQXQoaW5kZXgpO1xyXG4gICAgfTtcclxuICAgIFNvdXAucHJvdG90eXBlLmdldFJhbmRvbUNlbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuYm9hcmQuZ2V0U2l6ZSgpKTtcclxuICAgICAgICB2YXIgY29sdW1uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5ib2FyZC5nZXRTaXplKCkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJvYXJkLmdldENlbGwocm93LCBjb2x1bW4pO1xyXG4gICAgfTtcclxuICAgIFNvdXAucHJvdG90eXBlLmdldFJhbmRvbURpcmVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGlyZWN0aW9ucyA9IDM7IC8vSE9SSVpPTlRBTCxWRVJUSUNBTCxESUFHT05BTC4gXHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGRpcmVjdGlvbnMpICsgMTtcclxuICAgICAgICA7XHJcbiAgICB9O1xyXG4gICAgU291cC5wcm90b3R5cGUuaXNJbnZlcnRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpc0ludmVydCA9IChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKSA9PSAxKSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gaXNJbnZlcnQ7XHJcbiAgICB9O1xyXG4gICAgU291cC5wcm90b3R5cGUuZmlsbEVtcHR5Q2VsbHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5ib2FyZC5nZXRTaXplKCk7IHJvdysrKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGNvbHVtbiA9IDA7IGNvbHVtbiA8IHRoaXMuYm9hcmQuZ2V0U2l6ZSgpOyBjb2x1bW4rKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmJvYXJkLmdldENlbGwocm93LCBjb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNlbGwuZ2V0Q29udGVudCgpID09IHRoaXMuYm9hcmQuZ2V0RGVmYXVsdENvbnRlbnRDZWxsKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsLnNldENvbnRlbnQodGhpcy5nZXRSYW5kb21DaGFyRnJvbUZpbGwoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNvdXA7XHJcbn0oKSk7XHJcbmV4cG9ydHMuU291cCA9IFNvdXA7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMyOTFjQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5emIzVndMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMR2xEUVVGblF6dEJRVVZvUXl4NVJFRkJjMFE3UVVGRmRFUTdTVUZUU1N4alFVRlpMRTlCUVhGQ0xFVkJRVU1zU1VGQlZ5eEZRVUZETEVsQlFWazdVVUZEZEVRc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlN5eFBRVUZQTEVOQlFVTTdVVUZEZWtJc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZEYWtJc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEYmtJc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlR5eEpRVUZKTEdGQlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRjRVFzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl3MFFrRkJORUlzUTBGQlF6dFJRVU5vUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVRXNRMEZCUXl4RFFVRkJMRWxCUVVrc1EwRkJRU3hEUVVGRExFTkJRVUVzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXp0SlFVTTNReXhEUVVGRE8wbEJSVTBzZFVKQlFWRXNSMEZCWmp0UlFVTkpMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdVVUZEYmtJc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEYmtJc1MwRkJTeXhKUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZETEVWQlFVVXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZITEV0QlFVc3NSVUZCUlN4RlFVRkZPMWxCUTNaRUxFbEJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTTdXVUZEYkVRc1NVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRaUVVNeFF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVDBGQlR5eEZRVUZETEV0QlFVc3NSVUZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRVVVzUTBGQlF6dFpRVU01UkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0VFFVTnNRenRSUVVOQkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0UlFVTjBRaXhQUVVGUExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNN1NVRkRja01zUTBGQlF6dEpRVVZOTERCQ1FVRlhMRWRCUVd4Q0xGVkJRVzFDTEdOQlFYTkNPMUZCUTNKRExFbEJRVWNzWTBGQll6dFpRVUZGTEU5QlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTjBSU3hQUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdTVUZEZWtJc1EwRkJRenRKUVVWTkxHMUNRVUZKTEVkQlFWZzdVVUZEU1N4UFFVRlBMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdTVUZETjBJc1EwRkJRenRKUVVWTkxIbENRVUZWTEVkQlFXcENMRlZCUVd0Q0xFOUJRWEZDTzFGQlEyNURMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZGTzBsQlF6VkNMRU5CUVVNN1NVRkZUU3h6UWtGQlR5eEhRVUZrTEZWQlFXVXNTVUZCVnp0UlFVTjBRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZGTEVsQlFVa3NRMEZCUXp0UlFVTm9RaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRGJFTXNRMEZCUXp0SlFVVk5MSE5DUVVGUExFZEJRV1E3VVVGRFJ5eFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRjRUlzUTBGQlF6dEpRVVZOTEhOQ1FVRlBMRWRCUVdRc1ZVRkJaU3hKUVVGWE8xRkJRM1JDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRM0pDTEVOQlFVTTdTVUZGVHl3MFFrRkJZU3hIUVVGeVFpeFZRVUZ6UWl4UFFVRmpPMUZCUTJoRExFbEJRVWtzVjBGQlZ5eEhRVUZITEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNN1VVRkRha01zU1VGQlNTeGhRVUZoTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUXpGQ0xFbEJRVWtzUzBGQlN5eEhRVUZsTEVWQlFVVXNRMEZCUXp0UlFVTXpRaXhIUVVGSE8xbEJRME1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl3MlFrRkJOa0lzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0WlFVTjRSQ3hKUVVGSkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1JVRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFpRVU12UXl4SlFVRkpMRTlCUVU4N1owSkJRVWNzWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUlR0VFFVTjJReXhSUVVGUkxFTkJRVVVzWVVGQllTeEZRVUZGTzFGQlF6RkNMRTlCUVU4c1MwRkJTeXhEUVVGRE8wbEJRMnBDTEVOQlFVTTdTVUZGVHl4blEwRkJhVUlzUjBGQmVrSXNWVUZCTUVJc1QwRkJZeXhGUVVGRExFdEJRV2xDTEVWQlFVTXNVVUZCWjBJN1VVRkRka1VzUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVNc1EwRkJReXhIUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVkQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRekZFTEVsQlFVa3NTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU53UWl4SlFVRkpMRmRCUVZjc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZCTEVOQlFVTXNRMEZCUVN4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUVzUTBGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOdVJDeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8xbEJRemRDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNSVUZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFVkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVMEZETTBRN1NVRkRUQ3hEUVVGRE8wbEJSVThzTkVOQlFUWkNMRWRCUVhKRExGVkJRWE5ETEZkQlFXdENPMUZCUTNCRUxFbEJRVWtzYTBKQlFXdENMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJReTlDTEVsQlFVa3NTMEZCU3l4SFFVRmxMRVZCUVVVc1EwRkJRenRSUVVNelFpeEhRVUZITzFsQlEwTXNTVUZCVFN4VlFVRlZMRWRCUVVVc1NVRkJTU3hEUVVGRExHRkJRV0VzUlVGQlJTeERRVUZETzFsQlEzWkRMRWxCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3hEUVVGRE8xbEJRelZETEVsQlFVY3NVMEZCVXl4SlFVRkpMRzlEUVVGblFpeERRVUZETEZGQlFWRTdaMEpCUVVjc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVlVGQlZTeEZRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMWxCUTNoSExFbEJRVWNzVTBGQlV5eEpRVUZKTEc5RFFVRm5RaXhEUVVGRExGVkJRVlU3WjBKQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETEZWQlFWVXNSVUZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRaUVVOdVJ5eEpRVUZITEZOQlFWTXNTVUZCU1N4dlEwRkJaMElzUTBGQlF5eFJRVUZSTzJkQ1FVRkhMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXl4VlFVRlZMRVZCUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03V1VGRGRFY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1RVRkJUU3hMUVVGTExGZEJRVmM3WjBKQlFVVXNhMEpCUVd0Q0xFZEJRVWNzU1VGQlNTeERRVUZETzFOQlF5OUVMRkZCUVZFc1EwRkJSU3hyUWtGQmEwSXNSVUZCUnp0UlFVVm9ReXhQUVVGUExFdEJRVXNzUTBGQlF6dEpRVU5xUWl4RFFVRkRPMGxCUlU4c01rSkJRVmtzUjBGQmNFSXNWVUZCY1VJc1MwRkJhVUlzUlVGQlF5eFBRVUZqTzFGQlEycEVMRWxCUVVrc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF6dFJRVU51UWl4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdFpRVU55UXl4SlFVRkpMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFZRVUZWTEVWQlFVVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRVZCUVVVN1owSkJReTlFTEU5QlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNN1owSkJRMmhDTEUxQlFVMDdZVUZEVUR0VFFVTkdPMUZCUTBRc1QwRkJUeXhQUVVGUExFTkJRVU03U1VGRGJrSXNRMEZCUXp0SlFVVlBMRzlEUVVGeFFpeEhRVUUzUWp0UlFVTkpMRWxCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkZMRU5CUVVVN1VVRkRPVVFzVDBGQlVTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU53UXl4RFFVRkRPMGxCUlU4c05FSkJRV0VzUjBGQmNrSTdVVUZEU1N4SlFVRk5MRWRCUVVjc1IwRkJVU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJTU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVVN1VVRkRjRVVzU1VGQlRTeE5RVUZOTEVkQlFVc3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF5eERRVUZGTzFGQlEzQkZMRTlCUVU4c1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wbEJRekZETEVOQlFVTTdTVUZGVHl4cFEwRkJhMElzUjBGQk1VSTdVVUZEU1N4SlFVRkpMRlZCUVZVc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlFTeG5RMEZCWjBNN1VVRkRia1FzVDBGQlR5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eFZRVUZWTEVOQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkJReXhEUVVGRE8wbEJRM3BFTEVOQlFVTTdTVUZGVHl3NFFrRkJaU3hIUVVGMlFqdFJRVU5KTEVsQlFVa3NVVUZCVVN4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVVVzUTBGQlF5eERRVUZETEVOQlFVRXNRMEZCUXl4RFFVRkJMRWxCUVVrc1EwRkJRU3hEUVVGRExFTkJRVUVzUzBGQlN5eERRVUZETzFGQlF6ZEVMRTlCUVU4c1VVRkJVU3hEUVVGRE8wbEJRM0JDTEVOQlFVTTdTVUZGVHl3MlFrRkJZeXhIUVVGMFFqdFJRVU5KTEV0QlFVc3NTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJReXhGUVVGRkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEZRVUZGTzFsQlEycEVMRXRCUVVzc1NVRkJTU3hOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTEUxQlFVMHNSMEZCU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RlFVRkZPMmRDUVVNelJDeEpRVUZKTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVWQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1owSkJRekZETEVsQlFVa3NTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hKUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVVzUlVGQlJUdHZRa0ZEZWtRc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVVzUTBGQlF5eERRVUZETzJsQ1FVTnFSRHRoUVVOS08xTkJRMG83U1VGRFRDeERRVUZETzBsQlJVd3NWMEZCUXp0QlFVRkVMRU5CUVVNc1FVRjRTVVFzU1VGM1NVTTdRVUY0U1Zrc2IwSkJRVWtpZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==